class Solution {
    
//         int rows = grid.length;
//         int cols = grid[0].length;
        
//         int i = rows-1;
//         int j = 0;
        
//         int c = 0;
        
//         while(j<cols && i>=0){
            
//             if(grid[i][j] < 0){
                
//                 i--;
//                 c = c + (cols-j);
                
//             }
//             else
//                 j++;
//         }
//         return c;
        
        public int countNegatives(int[][] grid) {
        
        int ans = 0;
        // int rows = grid.length;
        // int cols = grid[0].length;
        
        for(int i=0;i<grid.length;i++){
            ans += bSearch(grid[i]);
            
        }
        return ans;
        
    }
    
      public int bSearch(int arr[]){
          int ans = 0;
              
          
          int l= 0 , r=arr.length - 1;
          
          while(l <= r){
              int mid = l +(r-l)/2;
              
              if(arr[mid] < 0){
                  ans += r - mid+1;
                  r=mid-1;
              }
              else{
                  l=mid+1;
              }
          }
          return ans;
          
      }  

}

